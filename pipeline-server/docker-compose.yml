services:
#   gitlab:
#     image: gitlab/gitlab-ce:latest
#     container_name: gitlab
#     restart: always
#     hostname: '0.0.0.0'
#     environment:
#       GITLAB_OMNIBUS_CONFIG: |
#         external_url 'http://0.0.0.0:8085'
#         gitlab_rails['gitlab_shell_ssh_port'] = 2222
#         # Enable GitLab Prometheus metrics
#         prometheus_monitoring['enable'] = true
#         gitlab_exporter['enable'] = true
#     ports:
#       - "8085:80"
#       - "8443:443"
#       - "2222:22"
#     volumes:
#       - ./pipeline-server/data/gitlab/config:/etc/gitlab
#       - ./pipeline-server/data/gitlab/logs:/var/log/gitlab
#       - ./pipeline-server/data/gitlab/data:/var/opt/gitlab
#     shm_size: '256m'
#     networks:
#       - devops-spring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./pipeline-server/data/prometheus/config:/etc/prometheus 
      - ./pipeline-server/data/prometheus/data:/prometheus      
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'             
      - '--web.enable-lifecycle'
    networks:
      - devops-spring

  sonarqube:
    image: sonarqube:9.9-community
    container_name: sonarqube
    restart: always
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    ports:
      - "9002:9000"
    volumes:
      - ./pipeline-server/data/sonarqube/data:/opt/sonarqube/data
      - ./pipeline-server/data/sonarqube/logs:/opt/sonarqube/logs
      - ./pipeline-server/data/sonarqube/extensions:/opt/sonarqube/extensions
    networks:
      - devops-spring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "3001:3000"
    volumes:
      - ./pipeline-server/data/grafana:/var/lib/grafana 
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - devops-spring
    depends_on:
      - prometheus

  jenkins:
    image: jenkins/jenkins:lts-jdk17
    container_name: jenkins
    restart: always
    ports:
      - "8081:8080"
      - "50001:50000"
    volumes:
      - ./pipeline-server/data/jenkins:/var/jenkins_home 
    environment:
      # - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
      - JENKINS_OPTS="--prefix=/jenkins"
    networks:
      - devops-spring

  zap:
    image: zaproxy/zap-stable:latest
    container_name: zap
    restart: always
    networks:
      - devops-spring
    ports:
      - "8080:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./pipeline-server/data/zap:/home/zap/.ZAP
    command: >
      zap.sh -daemon -port 8080 -host 0.0.0.0
      -config api.disablekey=true
      -config api.addrs.addr.name=.*
      -config api.addrs.addr.regex=true
    deploy:
      resources:
        limits:
          memory: 3G

networks:
  devops-spring:
    driver: bridge
